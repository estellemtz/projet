dir.create("inst")
file.create("R/generer_rapport.R")
devtools::document()
devtools::load_all()
generer_rapport("Nantes", "Loire-Atlantique", "rapport_nantes.html")
usethis::use_vignette("generer_un_rapport")
devtools::build_vignettes()
install.packages("pkgdown")
install.packages("pkgdown")
usethis::use_pkgdown_github_pages()
generer_rapport("Nantes", "Loire-Atlantique", "rapport_nantes.html")
---
title: "Rapport Quarto"
quarto::quarto_path()
---
title: "Rapport Quarto"
quarto::quarto_render("inst/rapport.qmd", execute_params = list(commune = "Nantes", departement = "Loire-Atlantique"))
install.packages("quarto")
quarto::quarto_render("inst/rapport.qmd", execute_params = list(commune = "Nantes", departement = "Loire-Atlantique"))
quarto::quarto_render("inst/rapport.qmd", execute_params = list(commune = "Nantes", departement = "Loire-Atlantique"))
quarto::quarto_render("inst/rapport.qmd")
install.packages("dplyr")
quarto::quarto_render("inst/rapport.qmd")
devtools::document()
devtools::document()
devtools::document()
devtools::install()
generer_rapport("Nantes", "Loire-Atlantique", "rapport_nantes.html")
rlang::last_trace()
installed.packages()["dplyr", ]
library(projetFinal)
generer_rapport("Nantes", "Loire-Atlantique", "rapport_nantes.html")
quarto::quarto_render("inst/rapport.qmd", execute_params = list(commune = "Nantes", departement = "Loire-Atlantique"))
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
generer_rapport("Nantes", "Loire-Atlantique", "rapport_nantes.html")
quarto::quarto_render("inst/rapport.qmd", execute_params = list(commune = "Nantes", departement = "Loire-Atlantique"))
# Chargement des librairies nécessaires
packages <- c("dplyr", "ggplot2", "remotes", "quarto")
installed <- rownames(installed.packages())
for (pkg in packages) {
if (!pkg %in% installed) install.packages(pkg)
library(pkg, character.only = TRUE)
}
# Installation et chargement de la librairie depuis GitHub
if (!requireNamespace("firstlibEstelle", quietly = TRUE)) {
remotes::install_github("estellemtz/firstlibEstelle")
}
library(firstlibEstelle)
# Charger les données
elus_conseillers <- load_elus_conseillers()
# Récupération des paramètres
code_commune <- params$commune
code_departement <- params$departement
# Vérification des noms de colonnes après standardisation
nom_col_commune <- "Code.de.la.commune"
nom_col_departement <- "Code.du.departement"
commune_data <- elus_conseillers %>%
filter(.data[[nom_col_commune]] == code_commune)
# Charger les données
elus_conseillers <- load_elus_conseillers()
# Charger les données
elus_conseillers <- load_elus_conseillers()
colnames(elus_conseillers) <- make.names(colnames(elus_conseillers))
head(elus_conseillers)
# Récupération des paramètres
code_commune <- params$commune
code_departement <- params$departement
# Vérification des noms de colonnes après standardisation
nom_col_commune <- "Code.de.la.commune"
nom_col_departement <- "Code.du.departement"
commune_data <- elus_conseillers %>%
filter(.data[[nom_col_commune]] == code_commune)
departement_data <- elus_conseillers %>%
filter(.data[[nom_col_departement]] == code_departement)
commune_objet <- creer_commune(commune_data)
departement_objet <- creer_departement(departement_data)
col_pro <- "Libellé.de.la.categorie.socio.professionnelle"
col_pro <- make.names(col_pro)
ggplot(commune_objet, aes(x = .data[[col_pro]])) +
geom_bar(fill = "blue") +
coord_flip() +
labs(
title = paste("Répartition des professions - Commune", code_commune),
x = "Profession",
y = "Nombre d'élus"
) +
theme_minimal()
?creer_commune
View(elus_conseillers)
# Vérification des noms de colonnes après standardisation
nom_col_commune <- "Code.de.la.commune"
nom_col_departement <- "Code.du.departement"
# Récupération des paramètres
code_commune <- params$commune
code_departement <- params$departement
# Vérification des noms de colonnes après standardisation
nom_col_commune <- "Code.de.la.commune"
nom_col_departement <- "Code.du.departement"
commune_data <- elus_conseillers |>
filter(.data[[nom_col_commune]] == code_commune)
head(commune_data)
departement_data <- elus_conseillers %>%
filter(.data[[nom_col_departement]] == code_departement)
nom_col_departement <- "Code.du.département"
commune_data <- elus_conseillers |>
filter(.data[[nom_col_commune]] == code_commune)
departement_data <- elus_conseillers |>
filter(.data[[nom_col_departement]] == code_departement)
if (nrow(commune_data) == 0) stop(" Aucune donnée trouvée pour cette commune.")
# Vérifier si le code de la commune est bien présent dans les données
unique(elus_conseillers$Code.de.la.commune)
# Vérifier si le code de la commune est bien présent dans les données
unique(elus_conseillers$Code.de.la.commune)
str(elus_conseillers)
# Récupération des paramètres passés par Quarto
code_commune <- params$commune
code_departement <- params$departement
# Vérification des colonnes
nom_col_commune <- "Code.de.la.commune"
nom_col_departement <- "Code.du.département"
# Filtrage des données pour la commune et le département
commune_data <- elus_conseillers %>%
filter(.data[[nom_col_commune]] == code_commune)
departement_data <- elus_conseillers %>%
filter(.data[[nom_col_departement]] == code_departement)
# Vérification de la présence de données
if (nrow(commune_data) == 0) stop("⚠ Aucune donnée trouvée pour cette commune.")
commune_objet <- creer_commune(commune_data)
departement_objet <- creer_departement(departement_data)
summary.commune(commune_objet)
# Nombre d'adjoints dans la commune
nombre_adjoints <- compter_nombre_d_adjoints(commune_objet)
## Récupération des paramètres passés par Quarto
code_commune <- params$commune  # 44109 = Nantes
code_departement <- params$departement  # 44 = Loire-Atlantique
# Vérification des colonnes
nom_col_commune <- "Code.de.la.commune"
nom_col_departement <- "Code.du.département"
# Filtrage des données pour Nantes
nantes_data <- elus_conseillers %>%
filter(.data[[nom_col_commune]] == code_commune)
# Filtrage des données pour Loire-Atlantique
loire_atlantique_data <- elus_conseillers %>%
filter(.data[[nom_col_departement]] == code_departement)
# Vérification de la présence de données
if (nrow(nantes_data) == 0) stop("Aucune donnée trouvée pour Nantes.")
## Récupération des paramètres passés par Quarto
code_commune <- params$commune  # 44109 = Nantes
code_departement <- params$departement  # 44 = Loire-Atlantique
# Vérification des colonnes
nom_col_commune <- "Code.de.la.commune"
nom_col_departement <- "Code.du.département"
# Filtrage des données pour Nantes
nantes_data <- elus_conseillers %>%
filter(.data[[nom_col_commune]] == code_commune)
# Filtrage des données pour Loire-Atlantique
loire_atlantique_data <- elus_conseillers %>%
filter(.data[[nom_col_departement]] == code_departement)
# Vérification de la présence de données
if (nrow(nantes_data) == 0) stop("Aucune donnée trouvée pour Nantes.")
if (nrow(loire_atlantique_data) == 0) stop("Aucune donnée trouvée pour Loire-Atlantique.")
# Création des objets pour la commune de Nantes et le département de Loire-Atlantique
nantes_objet <- creer_commune(nantes_data)
loire_atlantique_objet <- creer_departement(loire_atlantique_data)
summary.commune(nantes_objet)
class(nantes_objet)
## Récupération des paramètres passés par Quarto
code_commune <- params$commune  # 44109 = Nantes
code_departement <- params$departement  # 44 = Loire-Atlantique
# Vérification des colonnes
nom_col_commune <- "Code.de.la.commune"
nom_col_departement <- "Code.du.département"
# Filtrage des données pour Nantes
nantes_data <- elus_conseillers %>%
filter(.data[[nom_col_commune]] == code_commune)
# Filtrage des données pour Loire-Atlantique
loire_atlantique_data <- elus_conseillers %>%
filter(.data[[nom_col_departement]] == code_departement)
# Vérification de la présence de données
if (nrow(nantes_data) == 0) stop("Aucune donnée trouvée pour Nantes.")
if (nrow(loire_atlantique_data) == 0) stop("Aucune donnée trouvée pour Loire-Atlantique.")
# Création des objets pour la commune de Nantes et le département de Loire-Atlantique
nantes_objet <- creer_commune(nantes_data)
loire_atlantique_objet <- creer_departement(loire_atlantique_data)
summary.commune(nantes_objet)
git add .
summary
summary.commune <- function(object, ...) {
if (!inherits(object, "commune")) {
stop("L'objet n'est pas de la classe 'commune'")
}
# Exemple de résumé : afficher le nombre total d'élus dans la commune
nombre_elus <- nrow(object)
cat("Résumé de la commune :\n")
cat("Nombre total d'élus :", nombre_elus, "\n")
repartition_csp <- table(object$Libellé.de.la.categorie.socio.professionnelle)
cat("\nRépartition par catégorie socio-professionnelle :\n")
print(repartition_csp)
}
summary(nantes_objet)
usethis::use_vignette("generer_un_rapport")
usethis::use_description_field("VignetteBuilder", "quarto")
install.packages("pkgdown")
install.packages("pkgdown")
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
remotes::install_github("utilisateur/nom_du_repo")
